From 29d62e9fef03dcca52ab8e031ef58a7ca67c5f2c Mon Sep 17 00:00:00 2001
From: linsaftw <25271111+linsaftw@users.noreply.github.com>
Date: Fri, 30 Apr 2021 23:51:51 -0300
Subject: [PATCH] FlameCord logger options


diff --git a/flamecord/src/main/java/dev/_2lstudios/flamecord/configuration/FlameCordConfiguration.java b/flamecord/src/main/java/dev/_2lstudios/flamecord/configuration/FlameCordConfiguration.java
index 8bb61ac1..056dcb81 100644
--- a/flamecord/src/main/java/dev/_2lstudios/flamecord/configuration/FlameCordConfiguration.java
+++ b/flamecord/src/main/java/dev/_2lstudios/flamecord/configuration/FlameCordConfiguration.java
@@ -12,6 +12,15 @@ import net.md_5.bungee.config.Configuration;
 import net.md_5.bungee.config.ConfigurationProvider;
 
 public class FlameCordConfiguration {
+    @Getter
+    private boolean loggerInitialhandler = false;
+    @Getter
+    private boolean loggerExceptions = false;
+    @Getter
+    private boolean loggerDump = false;
+    @Getter
+    private boolean loggerHaProxy = false;
+
     @Getter
     private boolean firewallNotify = true;
     @Getter
@@ -34,6 +43,11 @@ public class FlameCordConfiguration {
                 configuration = configurationProvider.load(configurationFile);
             }
 
+            this.loggerInitialhandler = setIfUnexistant("logger.initialhandler", this.loggerInitialhandler, configuration);
+            this.loggerExceptions = setIfUnexistant("logger.exceptions", this.loggerExceptions, configuration);
+            this.loggerDump = setIfUnexistant("logger.dump", this.loggerDump, configuration);
+            this.loggerHaProxy = setIfUnexistant("logger.haproxy", this.loggerHaProxy, configuration);            
+
             this.firewallEnabled = setIfUnexistant("firewall.enabled", this.firewallEnabled, configuration);
             this.firewallNotify = setIfUnexistant("firewall.notify", this.firewallNotify, configuration);
             this.firewallSeconds = setIfUnexistant("firewall.seconds", this.firewallSeconds, configuration);
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index 3c8bd33b..efd1d213 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -353,7 +353,8 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         {
             case 1:
                 // Ping
-                if ( bungee.getConfig().isLogPings() )
+                // FlameCord - Option to log initialhandler
+                if ( bungee.getConfig().isLogPings() && FlameCord.getInstance().getFlameCordConfiguration().isLoggerInitialhandler() )
                 {
                     bungee.getLogger().log( Level.INFO, "{0} has pinged", this );
                 }
@@ -362,7 +363,8 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                 break;
             case 2:
                 // Login
-                if (BungeeCord.getInstance().getConfig().isLogInitialHandlerConnections() ) // Waterfall
+                // FlameCord - Option to log initialhandler
+                if (BungeeCord.getInstance().getConfig().isLogInitialHandlerConnections() && FlameCord.getInstance().getFlameCordConfiguration().isLoggerInitialhandler() ) // Waterfall
                 {
                     bungee.getLogger().log( Level.INFO, "{0} has connected", this );
                 }
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
index 376daee9..62895541 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
@@ -47,7 +47,8 @@ public class HandlerBoss extends ChannelInboundHandlerAdapter
             channel = new ChannelWrapper( ctx );
             handler.connected( channel );
 
-            if ( !( handler instanceof InitialHandler || handler instanceof PingHandler ) )
+            // FlameCord - Option to log initialhandler
+            if ( !( handler instanceof InitialHandler || handler instanceof PingHandler ) && FlameCord.getInstance().getFlameCordConfiguration().isLoggerInitialhandler() )
             {
                 ProxyServer.getInstance().getLogger().log( Level.INFO, "{0} has connected", handler );
             }
@@ -62,7 +63,8 @@ public class HandlerBoss extends ChannelInboundHandlerAdapter
             channel.markClosed();
             handler.disconnected( channel );
 
-            if ( !( handler instanceof InitialHandler || handler instanceof PingHandler ) )
+            // FlameCord - Option to log initialhandler
+            if ( !( handler instanceof InitialHandler || handler instanceof PingHandler ) && FlameCord.getInstance().getFlameCordConfiguration().isLoggerInitialhandler() )
             {
                 ProxyServer.getInstance().getLogger().log( Level.INFO, "{0} has disconnected", handler );
             }
@@ -93,10 +95,12 @@ public class HandlerBoss extends ChannelInboundHandlerAdapter
             {
                 InetSocketAddress newAddress = new InetSocketAddress( proxy.sourceAddress(), proxy.sourcePort() );
 
-                ProxyServer.getInstance().getLogger().log( Level.FINE, "Set remote address via PROXY {0} -> {1}", new Object[]
-                {
-                    channel.getRemoteAddress(), newAddress
-                } );
+                // FlameCord - Option to log haproxy
+                if ( FlameCord.getInstance().getFlameCordConfiguration().isLoggerHaProxy() )
+                    ProxyServer.getInstance().getLogger().log( Level.FINE, "Set remote address via PROXY {0} -> {1}", new Object[]
+                    {
+                        channel.getRemoteAddress(), newAddress
+                    } );
 
                 channel.setRemoteAddress( newAddress );
             } finally
@@ -140,6 +144,9 @@ public class HandlerBoss extends ChannelInboundHandlerAdapter
         {
             boolean logExceptions = !( handler instanceof PingHandler );
 
+            // FlameCord - Option to log exceptions
+            logExceptions = FlameCord.getInstance().getFlameCordConfiguration().isLoggerExceptions() ? logExceptions : false;
+
             if ( logExceptions )
             {
                 if ( cause instanceof ReadTimeoutException )
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
index 4e23c996..7fb1e70f 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
@@ -116,7 +116,10 @@ public class PipelineUtils
         // FlameCord - Close on exception caught
         @Override
         public void exceptionCaught(final ChannelHandlerContext ctx, final Throwable cause) throws Exception {
-            cause.printStackTrace();
+            // FlameCord - Option to log exceptions
+            if (FlameCord.getInstance().getFlameCordConfiguration().isLoggerExceptions()) {
+                cause.printStackTrace();
+            }
 
             ctx.close();
         }
@@ -218,7 +221,10 @@ public class PipelineUtils
         // FlameCord - Close on exception caught
         @Override
         public void exceptionCaught(final ChannelHandlerContext ctx, final Throwable cause) throws Exception {
-            cause.printStackTrace();
+             // FlameCord - Option to log exceptions
+            if (FlameCord.getInstance().getFlameCordConfiguration().isLoggerExceptions()) {
+                cause.printStackTrace();
+            }
 
             ctx.close();
         }
-- 
2.31.1.windows.1

